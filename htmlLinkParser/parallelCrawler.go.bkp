package main

import (
	"fmt"
	"sync"
)

type SafeUrlMap struct {
	visited map[string]bool
	mutex	sync.Mutex
}

type Fetcher interface {
	// Fetch returns the body of URL and
	// a slice of URLs found on that page.
	Fetch(url string) (body string, urls []string, err error)
}

// Crawl uses fetcher to recursively crawl
// pages starting with url, to a maximum of depth.
func Crawl(url string, depth int, fetcher Fetcher) {
	
	result := make(chan string)
	urlMap := SafeUrlMap{visited: make(map[string]bool)}
	
	var crawl func(url string, depth int, fetcher Fetcher, res chan string)
	
	
	crawl = func(url string, depth int, fetcher Fetcher, res chan string){
		defer close(res)
		
		if depth <= 0 {
			return
		}
		
		urlMap.mutex.Lock()
		if _, ok := urlMap.visited[url]; ok {
			urlMap.mutex.Unlock()
			return
		} else {
			urlMap.visited[url] = true
			urlMap.mutex.Unlock()
		}

		
		body, urls, err := fetcher.Fetch(url)
		if err != nil {
			fmt.Println(err)
			return
		}
		res <- fmt.Sprintf("found: %s %q\n", url, body)
		
		results := make([]chan string, len(urls))
		
		for i, u := range urls {
			results[i] = make(chan string)
			go crawl(u, depth-1, fetcher, results[i])
		}
		
		for i := range urls {
			for s := range results[i] {
				res <- s
			}
		}
		return
	}
	
	go crawl(url, depth, fetcher, result)
	
	for res := range result {
		fmt.Println(res)
	}
	return
}

func main() {
	Crawl("https://golang.org/", 4, fetcher)
}

// fakeFetcher is Fetcher that returns canned results.
type fakeFetcher map[string]*fakeResult

type fakeResult struct {
	body string
	urls []string
}

func (f fakeFetcher) Fetch(url string) (string, []string, error) {
	if res, ok := f[url]; ok {
		return res.body, res.urls, nil
	}
	return "", nil, fmt.Errorf("not found: %s", url)
}

// fetcher is a populated fakeFetcher.
var fetcher = fakeFetcher{
	"https://golang.org/": &fakeResult{
		"The Go Programming Language",
		[]string{
			"https://golang.org/pkg/",
			"https://golang.org/cmd/",
		},
	},
	"https://golang.org/pkg/": &fakeResult{
		"Packages",
		[]string{
			"https://golang.org/",
			"https://golang.org/cmd/",
			"https://golang.org/pkg/fmt/",
			"https://golang.org/pkg/os/",
		},
	},
	"https://golang.org/pkg/fmt/": &fakeResult{
		"Package fmt",
		[]string{
			"https://golang.org/",
			"https://golang.org/pkg/",
		},
	},
	"https://golang.org/pkg/os/": &fakeResult{
		"Package os",
		[]string{
			"https://golang.org/",
			"https://golang.org/pkg/",
		},
	},
}

